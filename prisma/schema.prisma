// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @default(autoincrement()) @id //유저 아이디
  password String @db.VarChar(100) //유저 비밀번호
  email String @unique //유저 이메일
  nickname String @unique //유저 닉네임
  tel String @unique //유저 핸드폰 번호
  created_at DateTime @default(now()) //생성시간
  article Article[] //유저 한 명이 기사를 여러 개 누름
  
  comment Comment[] //유저 한 명이 댓글 여러 개 쓸 수 있음
}

model Article{
  id Int @default(autoincrement()) @id //기사의 아이디
  title String @db.VarChar(60) //기사의 제목
  content String @db.Text // 기사의 내용
  post_time DateTime @default(now()) //포스트 한 시각
  news_agency String @db.VarChar(10)
  updated_at DateTime? @map("updated_at") // 업데이트 한 시각
  like_num Int @default(0) //기사의 좋아요 수
  comment_num Int @default(0) // 기사의 표면에 보이는 댓글 수
  user User @relation(fields: [user_id],references: [id])//기사에 좋아요른 누른 사람이 여러 명
  user_id Int
  comment Comment[]
  // 기사는 댓글을 여러 개 가질 수 있다.
}

model Comment{
  id Int @default(autoincrement()) @id //댓글의 아이디
  content String @db.Text // 댓글의 내용
  is_secret Boolean @default(false) //익명 여부
  like_num Int @default(0) //댓글의 좋아요 수
  created_at DateTime @default(now())//생성된 시각
  updated_at DateTime?  //업데이트된 시각

  article Article @relation(fields: [article_id],references: [id])
  article_id Int //댓글을 쓰려면 기사의 아이디가 있어야 하기에 FK
  user User @relation(fields: [user_id],references: [id])
  user_id Int //user가 댓글을 쓰기에 FK로
  
}
